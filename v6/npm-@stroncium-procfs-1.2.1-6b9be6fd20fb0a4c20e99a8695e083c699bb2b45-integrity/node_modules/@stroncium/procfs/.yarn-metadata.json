{
  "manifest": {
    "name": "@stroncium/procfs",
    "version": "1.2.1",
    "description": "Zero dependency library for reading and parsing various files from `procfs` for Node.js, implemented in pure JS.",
    "main": "index.js",
    "files": [
      "lib/**"
    ],
    "scripts": {
      "build:api-xml": "haxe -D use_rtti_doc -cp haxe -xml ./builder/.tmp/api.xml procfs.Procfs",
      "build:clean-api-xml": "rm ./builder/.tmp/api.xml ./builder/.tmp/Main.n",
      "build:docs-asserts": "cd ./builder/.tmp && SRC=./api.xml DST_API_MD=../../API.md DST_ASSERTS=../../test/fixtures/type/asserts.js haxe -cp ../ -x Main",
      "build": "npm run build:api-xml && npm run build:docs-asserts && npm run build:clean-api-xml",
      "coverage": "codecov",
      "fulltest": "npm run build && npm run test",
      "test": "nyc ava && xo"
    },
    "engines": {
      "node": ">=8"
    },
    "author": {
      "name": "Yanis Benson",
      "email": "yanis.benson+project.nodejs.procfs@gmail.com"
    },
    "keywords": [
      "proc",
      "procfs",
      "process",
      "uptime",
      "stat",
      "statm",
      "status",
      "mountinfo",
      "cpuinfo",
      "loadavg",
      "meminfo",
      "diskstats",
      "io",
      "devices",
      "filesystems",
      "partitions",
      "swaps",
      "autogroup",
      "cgroups",
      "cmdline",
      "comm",
      "cpuset",
      "cwd",
      "environ",
      "exe",
      "fd",
      "gid_map",
      "limits",
      "oom_score",
      "personality",
      "setgroups",
      "timerslack_ns",
      "uid_map",
      "cmdline",
      "config",
      "version",
      "nodejs",
      "linux"
    ],
    "license": "CC0-1.0",
    "homepage": "https://github.com/stroncium/nodejs-procfs",
    "bugs": {
      "url": "https://github.com/stroncium/nodejs-procfs/issues",
      "email": "yanis.benson+project.nodejs.procfs@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/stroncium/nodejs-procfs.git"
    },
    "devDependencies": {
      "ava": "^1.4.1",
      "codecov": "^3.5.0",
      "haxe": "^5.0.10",
      "joi": "^14.3.1",
      "nyc": "^14.1.1",
      "xo": "^0.24.0"
    },
    "xo": {
      "rules": {
        "comma-dangle": [
          "error",
          "always-multiline"
        ],
        "prefer-const": [
          "off"
        ],
        "padding-line-between-statements": [
          "off"
        ],
        "radix": [
          "off"
        ],
        "no-return-assign": [
          "off"
        ],
        "no-control-regex": [
          "off"
        ],
        "capitalized-comments": [
          "off"
        ],
        "spaced-comment": [
          "off"
        ],
        "unicorn/filename-case": [
          "off"
        ],
        "unicorn/no-hex-escape": [
          "off"
        ],
        "prefer-destructuring": [
          "off"
        ],
        "operator-assignment": [
          "off"
        ]
      }
    },
    "_registry": "npm",
    "_loc": "/code/v6/npm-@stroncium-procfs-1.2.1-6b9be6fd20fb0a4c20e99a8695e083c699bb2b45-integrity/node_modules/@stroncium/procfs/package.json",
    "readmeFilename": "readme.md",
    "readme": "# procfs [![Build Status](https://travis-ci.com/stroncium/nodejs-procfs.svg?branch=master)](https://travis-ci.com/stroncium/nodejs-procfs) [![codecov](https://codecov.io/gh/stroncium/nodejs-procfs/branch/master/graph/badge.svg)](https://codecov.io/gh/stroncium/nodejs-procfs)\n\nZero dependency library for reading and parsing various files from `procfs` for Node.js, implemented in pure JS.\n\nLinux implements `procfs` filesystem mounted at `/proc`(usually). This filesystem is virtual, and can be used to extract various information about kernel state and running processes.\n\nCompatible with releases of Linux since 4.4 SLTS. Attempts to support new features from all the following releases. Features which are deprecated/discontinued in latest releases are not supported. Some features aren't expected to be used from Node.js and so were not implemented, if you need to use some of them, please open a feature request.\n\n## Example\n\n`npm install @stroncium/procfs`\n\n```js\nconst {\n\tprocfs,\n\tProcfsError,\n} = require('procfs');\n\nconsole.log(procfs.uptime()); // { time: 2514423.82, idle: 9658533.16 }\n\nconsole.log(procfs.processIo()); // { read: 66191, write: 147816, readSyscalls: 176, writeSyscalls: 498, readReal: 9805824, writeReal: 49152, writeCancelled: 0 }\n\nlet targetPid = 12345;\n\ntry {\n\tprocfs.processIo(targetPid);\n} catch (error) {\n\tif(error.code === ProcfsError.ERR_NOT_FOUND) {\n\t\tconsole.log('process ${targetPid} does not exist');\n\t}\n}\n```\n\n## API\n\nFull version of API is available in [API.md](https://github.com/stroncium/nodejs-procfs/blob/master/API.md).\n\nCurrently, the folowing `procfs` paths are supported by the library:\n - `/proc/*`: [procfs.processes](API.md#processes())\n - `/proc/<pid>/autogroup`: [procfs.processAutogroup](API.md#processAutogroup-pid)\n - `/proc/<pid>/cgroups`: [procfs.processCgroups](API.md#processCgroups-pid)\n - `/proc/<pid>/cmdline`: [procfs.processCmdline](API.md#processCmdline-pid)\n - `/proc/<pid>/comm`: [procfs.processComm](API.md#processComm-pid)\n - `/proc/<pid>/cpuset`: [procfs.processCpuset](API.md#processCpuset-pid)\n - `/proc/<pid>/cwd`: [procfs.processCwd](API.md#processCwd-pid)\n - `/proc/<pid>/environ`: [procfs.processEnviron](API.md#processEnviron-pid)\n - `/proc/<pid>/exe`: [procfs.processExe](API.md#processExe-pid)\n - `/proc/<pid>/fd/*`: [procfs.processFds](API.md#processFds-pid)\n - `/proc/<pid>/fd/<fd>`: [procfs.processFd](API.md#processFd-fd-pid)\n - `/proc/<pid>/fdinfo/<fd>`: [procfs.processFdinfo](API.md#processFdinfo-fd-pid)\n - `/proc/<pid>/gid_map`: [procfs.processGidMap](API.md#processGidMap-pid)\n - `/proc/<pid>/io`: [procfs.processIo](API.md#processIo-pid)\n - `/proc/<pid>/limits`: [procfs.processLimits](API.md#processLimits-pid)\n - `/proc/<pid>/mountinfo`: [procfs.processMountinfo](API.md#processMountinfo-pid)\n - `/proc/<pid>/net/dev`: [procfs.processNetDev](API.md#processNetDev-pid)\n - `/proc/<pid>/net/tcp6`: [procfs.processNetTcp6](API.md#processNetTcp6-pid)\n - `/proc/<pid>/net/tcp`: [procfs.processNetTcp4](API.md#processNetTcp4-pid)\n - `/proc/<pid>/net/udp6`: [procfs.processNetUdp6](API.md#processNetUdp6-pid)\n - `/proc/<pid>/net/udp`: [procfs.processNetUdp4](API.md#processNetUdp4-pid)\n - `/proc/<pid>/net/unix`: [procfs.processNetUnix](API.md#processNetUnix-pid)\n - `/proc/<pid>/net/wireless`: [procfs.processNetWireless](API.md#processNetWireless-pid)\n - `/proc/<pid>/oom_score`: [procfs.processOomScore](API.md#processOomScore-pid)\n - `/proc/<pid>/personality`: [procfs.processPersonality](API.md#processPersonality-pid)\n - `/proc/<pid>/stat`: [procfs.processStat](API.md#processStat-pid)\n - `/proc/<pid>/statm`: [procfs.processStatm](API.md#processStatm-pid)\n - `/proc/<pid>/status`: [procfs.processStatus](API.md#processStatus-pid)\n - `/proc/<pid>/task/*`: [procfs.processThreads](API.md#processThreads-pid)\n - `/proc/<pid>/timerslack_ns`: [procfs.processTimerslackNs](API.md#processTimerslackNs-pid)\n - `/proc/<pid>/uid_map`: [procfs.processUidMap](API.md#processUidMap-pid)\n - `/proc/cgroups`: [procfs.cgroups](API.md#cgroups())\n - `/proc/cmdline`: [procfs.cmdline](API.md#cmdline())\n - `/proc/config.gz`: [procfs.config](API.md#config())\n - `/proc/cpuinfo`: [procfs.cpuinfo](API.md#cpuinfo())\n - `/proc/devices`: [procfs.devices](API.md#devices())\n - `/proc/diskstats`: [procfs.diskstats](API.md#diskstats())\n - `/proc/filesystems`: [procfs.filesystems](API.md#filesystems())\n - `/proc/loadavg`: [procfs.loadavg](API.md#loadavg())\n - `/proc/meminfo`: [procfs.meminfo](API.md#meminfo())\n - `/proc/net/dev`: [procfs.netDev](API.md#netDev())\n - `/proc/net/tcp6`: [procfs.netTcp6](API.md#netTcp6())\n - `/proc/net/tcp`: [procfs.netTcp4](API.md#netTcp4())\n - `/proc/net/udp6`: [procfs.netUdp6](API.md#netUdp6())\n - `/proc/net/udp`: [procfs.netUdp4](API.md#netUdp4())\n - `/proc/net/unix`: [procfs.netUnix](API.md#netUnix())\n - `/proc/net/wireless`: [procfs.netWireless](API.md#netWireless())\n - `/proc/partitions`: [procfs.partitions](API.md#partitions())\n - `/proc/stat`: [procfs.stat](API.md#stat())\n - `/proc/swaps`: [procfs.swaps](API.md#swaps())\n - `/proc/uptime`: [procfs.uptime](API.md#uptime())\n - `/proc/version`: [procfs.version](API.md#version())\n\n## Custom procfs path\n\n```js\nconst {\n\tProcfs\n} = require('procfs');\n\nlet procfs = new Procfs('/custom/proc');\nconsole.log(procfs.uptime()); // { time: 2514423.82, idle: 9658533.16 }\n```\n\n## Performance\nGood performance is considered one of the main goals of this library, but for some calls which aren't expected to be used frequently the parsing might be done in sub-optimal(but still quite performant) way. If you encounter a need for performance optimizations of some call, please open an issue.\n\nCurrently, all the IO is done synchronously, in most cases it is faster than asynchronous IO for `procfs`.\nFor many methods, synchronous IO is *always* faster than asynchronous, as time required to perform full read synchronously is smaller than *just initializing* asynchronous read structures. For others, it is on par. In case when a lot of relatively big files are read at the same time, asynchronous IO can be faster on multi-core systems, so introducing async versions of methods is considered for future versions.\n\n## Development\n\n`npm run test` to perform a test without updating docs nor type asserts.\n\n`npm run fulltest` to `npm run build && npm run test`\n\n`npm run build` builds `API.md` and type asserts for tests from `haxe/procfs/Procfs.hx`.\n",
    "licenseText": "CC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work;\n\n  ii. moral rights retained by the original author(s) and/or performer(s);\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work;\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below;\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work;\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive); and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@stroncium/procfs/-/procfs-1.2.1.tgz#6b9be6fd20fb0a4c20e99a8695e083c699bb2b45",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@stroncium/procfs/-/procfs-1.2.1.tgz",
    "hash": "6b9be6fd20fb0a4c20e99a8695e083c699bb2b45",
    "integrity": "sha512-X1Iui3FUNZP18EUvysTHxt+Avu2nlVzyf90YM8OYgP6SGzTzzX/0JgObfO1AQQDzuZtNNz29bVh8h5R97JrjxA==",
    "registry": "npm",
    "packageName": "@stroncium/procfs",
    "cacheIntegrity": "sha512-X1Iui3FUNZP18EUvysTHxt+Avu2nlVzyf90YM8OYgP6SGzTzzX/0JgObfO1AQQDzuZtNNz29bVh8h5R97JrjxA== sha1-a5vm/SD7Ckwg6ZqGleCDxpm7K0U="
  },
  "registry": "npm",
  "hash": "6b9be6fd20fb0a4c20e99a8695e083c699bb2b45"
}