{
  "manifest": {
    "name": "imports-loader",
    "version": "5.0.0",
    "description": "imports loader module for webpack",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/imports-loader.git"
    },
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "homepage": "https://github.com/webpack-contrib/imports-loader",
    "bugs": {
      "url": "https://github.com/webpack-contrib/imports-loader/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 18.12.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "clean": "del-cli dist",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "commitlint": "commitlint --from=master",
      "security": "npm audit",
      "lint:prettier": "prettier --list-different .",
      "lint:js": "eslint --cache .",
      "lint:spelling": "cspell --no-must-find-files --cache --quiet \"**/*.*\"",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "fix:js": "npm run lint:js -- --fix",
      "fix:prettier": "npm run lint:prettier -- --write",
      "fix": "npm-run-all -l fix:js fix:prettier",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "husky install && npm run build",
      "release": "standard-version"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^5.0.0"
    },
    "dependencies": {
      "source-map-js": "^1.0.2",
      "strip-comments": "^2.0.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.23.4",
      "@babel/core": "^7.23.7",
      "@babel/preset-env": "^7.23.8",
      "@commitlint/cli": "^18.4.4",
      "@commitlint/config-conventional": "^18.4.4",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^29.7.0",
      "babel-loader": "^8.3.0",
      "cross-env": "^7.0.3",
      "cspell": "^8.3.2",
      "del": "^7.1.0",
      "del-cli": "^5.1.0",
      "eslint": "^8.56.0",
      "eslint-config-prettier": "^9.1.0",
      "eslint-plugin-import": "^2.29.1",
      "husky": "^8.0.3",
      "jest": "^29.7.0",
      "lint-staged": "^15.2.0",
      "memfs": "^4.6.0",
      "npm-run-all": "^4.1.5",
      "prettier": "^3.2.2",
      "standard-version": "^9.5.0",
      "webpack": "^5.89.0"
    },
    "keywords": [
      "webpack"
    ],
    "_registry": "npm",
    "_loc": "/code/v6/npm-imports-loader-5.0.0-b18635fd7fe28001518a1f54f30cd1dfbd3c5f38-integrity/node_modules/imports-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\"\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![discussion][discussion]][discussion-url]\n[![size][size]][size-url]\n\n# imports-loader\n\nThe imports loader allows you to use modules that depend on specific global variables.\n\nThis is useful for third-party modules that rely on global variables like `$` or `this` being the `window` object.\nThe imports loader can add the necessary `require('whatever')` calls, so those modules work with webpack.\n\nFor further hints on compatibility issues, check out [Shimming](https://webpack.js.org/guides/shimming/) of the official docs.\n\n> **Warning**\n>\n> By default loader generate ES module named syntax.\n\n> **Warning**\n>\n> Be careful, existing imports (`import`/`require`) in the original code and importing new values can cause failure.\n\n## Getting Started\n\nTo begin, you'll need to install `imports-loader`:\n\n```console\nnpm install imports-loader --save-dev\n```\n\nor\n\n```console\nyarn add -D imports-loader\n```\n\nor\n\n```console\npnpm add -D imports-loader\n```\n\nGiven you have this file:\n\n**example.js**\n\n```js\n$(\"img\").doSomeAwesomeJqueryPluginStuff();\n```\n\nThen you can inject the `jquery` value into the module by configuring the `imports-loader` using two approaches.\n\n### Inline\n\nThe `|` or `%20` (space) allow to separate the `syntax`, `moduleName`, `name` and `alias` of import.\nThe documentation and syntax examples can be read [here](#syntax).\n\n> **Warning**\n>\n> `%20` is space in a query string, because you can't use spaces in URLs\n\n```js\n// Alternative syntax:\n//\n// import myLib from 'imports-loader?imports=default%20jquery%20$!./example.js';\n//\n// `%20` is space in a query string, equivalently `default jquery $`\nimport myLib from \"imports-loader?imports=default|jquery|$!./example.js\";\n// Adds the following code to the beginning of example.js:\n//\n// import $ from \"jquery\";\n//\n// ...\n// Code\n// ...\n```\n\n```js\nimport myLib from \"imports-loader?imports=default|jquery|$,angular!./example.js\";\n// `|` is separator in a query string, equivalently `default|jquery|$` and `angular`\n// Adds the following code to the beginning of example.js:\n//\n// import $ from \"jquery\";\n// import angular from \"angular\";\n//\n// ...\n// Code\n// ...\n```\n\n```js\nimport myLib from \"imports-loader?imports=named|library|myMethod,angular!./example.js\";\n// `|` is separator in a query string, equivalently `named|library|myMethod` and `angular`\n// Adds the following code to the beginning of example.js:\n//\n// import { myMethod } from \"library\";\n// import angular from \"angular\";\n//\n// ...\n// Code\n// ...\n```\n\n```js\nconst myLib = require(\n  `imports-loader?type=commonjs&imports=single|jquery|$,angular!./example.js`,\n);\n// `|` is separator in a query string, equivalently `single|jquery|$` and `angular`\n// Adds the following code to the beginning of example.js:\n//\n// var $ = require(\"jquery\");\n// var angular = require(\"angular\");\n//\n// ...\n// Code\n// ...\n```\n\n```js\nconst myLib = require(\n  `imports-loader?type=commonjs&imports=single|myLib|myMethod&wrapper=window&!./example.js`,\n);\n// `|` is separator in a query string, equivalently `single|myLib|myMethod` and `angular`\n// Adds the following code to the example.js:\n//\n// const myMethod = require('myLib');\n//\n// (function () {\n// ...\n// Code\n// ...\n// }.call(window));\n```\n\n```js\nimport myLib from \"imports-loader?additionalCode=var%20myVariable%20=%20false;!./example.js\";\n// Adds the following code to the beginning of example.js:\n//\n// var myVariable = false;\n//\n// ...\n// Code\n// ...\n```\n\n### Using Configuration\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        // You can use `regexp`\n        // test: /example\\.js$/\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: [\n                \"default jquery $\",\n                \"default lib_2 lib_2_default\",\n                \"named lib_3 lib2_method_1\",\n                \"named lib_3 lib2_method_2 lib_2_method_2_short\",\n                \"namespace lib_4 my_namespace\",\n                \"side-effects lib_5\",\n                {\n                  syntax: \"default\",\n                  moduleName: \"angular\",\n                  name: \"angular\",\n                },\n              ],\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport $ from \"jquery\";\nimport lib_2_default from \"lib_2\";\nimport { lib2_method_1, lib2_method_2 as lib_2_method_2_short } from \"lib_3\";\nimport * as my_namespace from \"lib_4\";\nimport \"lib_5\";\nimport angular from \"angular\";\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n- **[`type`](#type)**\n- **[`imports`](#imports)**\n- **[`wrapper`](#wrapper)**\n- **[`additionalCode`](#additionalcode)**\n\n### `type`\n\nType:\n\n```ts\ntype type = string;\n```\n\nDefault: `module`\n\nFormat of generated exports.\n\nPossible values - `commonjs` (CommonJS module syntax) and `module` (ES module syntax).\n\n#### `commonjs`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        loader: \"imports-loader\",\n        options: {\n          syntax: \"default\",\n          type: \"commonjs\",\n          imports: \"Foo\",\n        },\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nvar Foo = require(\"Foo\");\n\n// ...\n// Code\n// ...\n```\n\n#### `module`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        loader: \"imports-loader\",\n        options: {\n          type: \"module\",\n          imports: \"Foo\",\n        },\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport Foo from \"Foo\";\n\n// ...\n// Code\n// ...\n```\n\n### `imports`\n\nType:\n\n```ts\ntype imports =\n  | string\n  | {\n      syntax:\n        | \"default\"\n        | \"named\"\n        | \"namespace\"\n        | \"side-effects\"\n        | \"single\"\n        | \"multiple\"\n        | \"pure\";\n      moduleName: string;\n      name: string;\n      alias: string;\n    }\n  | Array<\n      | string\n      | {\n          syntax:\n            | \"default\"\n            | \"named\"\n            | \"namespace\"\n            | \"side-effects\"\n            | \"single\"\n            | \"multiple\"\n            | \"pure\";\n          moduleName: string;\n          name: string;\n          alias: string;\n        }\n    >;\n```\n\nDefault: `undefined`\n\nList of imports.\n\n#### `string`\n\nAllows to use a string to describe an export.\n\n##### `Syntax`\n\nThe `|` or `%20` (space) allow to separate the `syntax`, `moduleName`, `name` and `alias` of import.\n\nString syntax - `[[syntax] [moduleName] [name] [alias]]` or `[[syntax]|[moduleName]|[name]|[alias]]`, where:\n\n- `[syntax]` (**may be omitted**):\n\n  - if `type` is `module`- can be `default`, `named`, `namespace` or `side-effects`, the default value is `default`.\n  - if `type` is `commonjs`- can be `single`, `multiple` or `pure`, the default value is `single`.\n\n- `[moduleName]` - name of an imported module (**required**)\n- `[name]` - name of an imported value (**required**)\n- `[alias]` - alias of an imported value (**may be omitted**)\n\nExamples:\n\nIf type `module`:\n\n- `[Foo]` - generates `import Foo from \"Foo\";`.\n- `[default Foo]` - generates `import Foo from \"Foo\";`.\n- `[default ./my-lib Foo]` - generates `import Foo from \"./my-lib\";`.\n- `[named Foo FooA]` - generates `import { FooA } from \"Foo\";`.\n- `[named Foo FooA Bar]` - generates `import { FooA as Bar } from \"Foo\";`.\n- `[namespace Foo FooA]` - generates `import * as FooA from \"Foo\";`.\n- `[side-effects Foo]` - generates `import \"Foo\";`.\n\nIf type `commonjs`:\n\n- `[Foo]` - generates `const Foo = require(\"Foo\");`.\n- `[single Foo]` - generates `const Foo = require(\"Foo\");`.\n- `[single ./my-lib Foo]` - generates `const Foo = require(\"./my-lib\");`.\n- `[multiple Foo FooA Bar]` - generates `const { FooA: Bar } = require(\"Foo\");`.\n- `[pure Foo]` - generates `require(\"Foo\");`.\n\n> **Warning**\n>\n> You need to set `type: \"commonjs\"` to use `single`, `multiple` and `pure` syntaxes.\n\n> **Warning**\n>\n> Aliases can't be used together with `default`, `namespace`, `side-effects`, `single` and `pure` syntaxes.\n\n###### Examples\n\n###### ES Module Default Import\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"./path/to/example.js\"),\n        loader: \"imports-loader\",\n        options: {\n          imports: \"default lib myName\",\n        },\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport myName from \"lib\";\n\n// ...\n// Code\n// ...\n```\n\n###### CommonJS Single Import\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"./path/to/example.js\"),\n        loader: \"imports-loader\",\n        options: {\n          type: \"commonjs\",\n          imports: \"single lib myName\",\n        },\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nvar myName = require(\"lib\");\n\n// ...\n// Code\n// ...\n```\n\n#### `object`\n\nAllows to use an object to describe an import.\n\nProperties:\n\n- `syntax`:\n\n  - if `type` is `module`- can be `default`, `named`, `namespace` or `side-effects`\n  - if `type` is `commonjs`- can be `single`, `multiple` or `pure`\n\n- `moduleName` - name of an imported module (**required**)\n- `name` - name of an imported value (**required**)\n- `alias` - alias of an imported value (**may be omitted**)\n\n> **Warning**\n>\n> Alias can't be used together with `default`, `namespace`, `side-effects`, `single` and `pure` syntaxes.\n\n##### Examples\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: {\n                syntax: \"named\",\n                moduleName: \"lib_2\",\n                name: \"lib2_method_2\",\n                alias: \"lib_2_method_2_alias\",\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport { lib2_method_2 as lib_2_method_2_alias } from \"lib_2\";\n\n// ...\n// Code\n// ...\n```\n\n#### `array`\n\nAllow to specify multiple imports.\nEach item can be a [`string`](https://github.com/webpack-contrib/imports-loader#string) or an [`object`](https://github.com/webpack-contrib/imports-loader#object).\n\n##### Examples\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: [\n                {\n                  moduleName: \"angular\",\n                },\n                {\n                  syntax: \"default\",\n                  moduleName: \"jquery\",\n                  name: \"$\",\n                },\n                \"default lib_2 lib_2_default\",\n                \"named lib_2 lib2_method_1\",\n                \"named lib_2 lib2_method_2 lib_2_method_2_alias\",\n                \"namespace lib_3 lib_3_all\",\n                \"side-effects lib_4\",\n              ],\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport angular from \"angular\";\nimport $ from \"jquery\";\nimport lib_2_default from \"lib_2\";\nimport { lib2_method_1, lib2_method_2 as lib_2_method_2_alias } from \"lib_2\";\nimport * as lib_3_all from \"lib_3\";\nimport \"lib_4\";\n\n// ...\n// Code\n// ...\n```\n\n### `wrapper`\n\nType:\n\n```ts\ntype wrapper =\n  | boolean\n  | string\n  | {\n      thisArg: string;\n      args: Record<string, string> | Array<string>;\n    };\n```\n\nDefault: `undefined`\n\nCloses the module code in a function with a given `thisArg` and `args` (`(function () { ... }).call();`).\n\n> **Warning**\n>\n> Do not use this option if source code contains ES module import(s)\n\n#### `boolean`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: {\n                moduleName: \"jquery\",\n                name: \"$\",\n              },\n              wrapper: true,\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport $ from \"jquery\";\n\n(function () {\n  // ...\n  // Code\n  // ...\n}).call();\n```\n\n#### `string`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: {\n                moduleName: \"jquery\",\n                name: \"$\",\n              },\n              wrapper: \"window\",\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport $ from \"jquery\";\n\n(function () {\n  // ...\n  // Code\n  // ...\n}).call(window);\n```\n\n#### `object`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: {\n                moduleName: \"jquery\",\n                name: \"$\",\n              },\n              wrapper: {\n                thisArg: \"window\",\n                args: [\"myVariable\", \"myOtherVariable\"],\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport $ from \"jquery\";\n\n(function (myVariable, myOtherVariable) {\n  // ...\n  // Code\n  // ...\n}).call(window, myVariable, myOtherVariable);\n```\n\n#### `object` with different parameter names\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: {\n                moduleName: \"jquery\",\n                name: \"$\",\n              },\n              wrapper: {\n                thisArg: \"window\",\n                args: {\n                  myVariable: \"var1\",\n                  myOtherVariable: \"var2\",\n                },\n              },\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport $ from \"jquery\";\n\n(function (var1, var2) {\n  // ...\n  // Code\n  // ...\n}).call(window, myVariable, myOtherVariable);\n```\n\n### `additionalCode`\n\nType:\n\n```ts\ntype additionalCode = string;\n```\n\nDefault: `undefined`\n\nAdds custom code as a preamble before the module's code.\n\n##### Examples\n\n###### Define custom variable\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: {\n                moduleName: \"jquery\",\n                name: \"$\",\n              },\n              additionalCode: \"var myVariable = false;\",\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport $ from \"jquery\";\n\nvar myVariable = false;\n\n// ...\n// Code\n// ...\n```\n\n###### Disable AMD Import Syntax\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: require.resolve(\"example.js\"),\n        use: [\n          {\n            loader: \"imports-loader\",\n            options: {\n              imports: {\n                moduleName: \"jquery\",\n                name: \"$\",\n              },\n              additionalCode:\n                \"var define = false; /* Disable AMD for misbehaving libraries */\",\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\nGenerate output:\n\n```js\nimport $ from \"jquery\";\n\nvar define = false; /* Disable AMD for misbehaving libraries */\n\n// ...\n// Code\n// ...\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/imports-loader.svg\n[npm-url]: https://www.npmjs.com/package/imports-loader\n[node]: https://img.shields.io/node/v/imports-loader.svg\n[node-url]: https://nodejs.org\n[tests]: https://github.com/webpack-contrib/imports-loader/workflows/imports-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/imports-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/imports-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/imports-loader\n[discussion]: https://img.shields.io/github/discussions/webpack/webpack\n[discussion-url]: https://github.com/webpack/webpack/discussions\n[size]: https://packagephobia.now.sh/badge?p=imports-loader\n[size-url]: https://packagephobia.now.sh/result?p=imports-loader\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/imports-loader/-/imports-loader-5.0.0.tgz#b18635fd7fe28001518a1f54f30cd1dfbd3c5f38",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/imports-loader/-/imports-loader-5.0.0.tgz",
    "hash": "b18635fd7fe28001518a1f54f30cd1dfbd3c5f38",
    "integrity": "sha512-tXgL8xxZFjOjQLLiE7my00UUQfktg4G8fdpXcZphL0bJWbk9eCxKKFaCwmFRcwyRJQl95GXBL1DoE1rCS/tcPw==",
    "registry": "npm",
    "packageName": "imports-loader",
    "cacheIntegrity": "sha512-tXgL8xxZFjOjQLLiE7my00UUQfktg4G8fdpXcZphL0bJWbk9eCxKKFaCwmFRcwyRJQl95GXBL1DoE1rCS/tcPw== sha1-sYY1/X/igAFRih9U8wzR3708Xzg="
  },
  "registry": "npm",
  "hash": "b18635fd7fe28001518a1f54f30cd1dfbd3c5f38"
}