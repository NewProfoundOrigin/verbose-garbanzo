{
  "manifest": {
    "name": "livereload",
    "description": "LiveReload server",
    "version": "0.9.3",
    "contributors": [
      {
        "name": "Brian P. Hogan",
        "email": "brianhogan@napcs.com"
      }
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "http://github.com/napcs/node-livereload.git"
    },
    "bin": {
      "livereload": "bin/livereload.js"
    },
    "main": "./lib/livereload.js",
    "dependencies": {
      "chokidar": "^3.5.0",
      "livereload-js": "^3.3.1",
      "opts": ">= 1.2.0",
      "ws": "^7.4.3"
    },
    "devDependencies": {
      "coffee-script": "^1.12",
      "mocha": "^5.2.0",
      "request": ">= 2.9.203",
      "should": "^13.2.1",
      "sinon": "^1.17.4"
    },
    "engines": {
      "node": ">=8.0.0"
    },
    "scripts": {
      "build": "node node_modules/coffee-script/bin/coffee -c lib",
      "test": "npm run build && (rm test/tmpfile*; mocha 'test/**/*.coffee')"
    },
    "_registry": "npm",
    "_loc": "/code/v6/npm-livereload-0.9.3-a714816375ed52471408bede8b49b2ee6a0c55b1-integrity/node_modules/livereload/package.json",
    "readmeFilename": "README.md",
    "readme": "node-livereload\n===============\n\n![Build status](https://travis-ci.org/napcs/node-livereload.svg?branch=master)\n\nAn implementation of the LiveReload server in Node.js. It's an alternative to the graphical [http://livereload.com/](http://livereload.com/) application, which monitors files for changes and reloads your web browser.\n\n## Usage\n\nYou can use this by using the official browser extension or by adding JavaScript code to your page.\n\n## Method 1: Use Browser Extension\n\nInstall the LiveReload browser plugins by visiting [http://help.livereload.com/kb/general-use/browser-extensions](http://help.livereload.com/kb/general-use/browser-extensions).\n\n**Note**: Only Google Chrome supports viewing `file:///` URLS, and you have to specifically enable it. If you are using other browsers and want to use `file:///` URLs, add the JS code to the page as shown in the next section.\n\nOnce you have the plugin installed, start `livereload`. Then, in the browser, click the LiveReload icon to connect the browser to the server.\n\n### Method 2: Add code to page\n\nAdd this code:\n\n```html\n<script>\n  document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] +\n  ':35729/livereload.js?snipver=1\"></' + 'script>')\n</script>\n```\n\nNote: If you are using a different port other than `35729` you will\nneed to change the above script.\n\n## Running LiveReload\n\nYou can run LiveReload two ways: using the CLI application or by writing your own server using the API.\n\n### Method 1: Using the Command line Interface\n\nTo use livereload from the command line:\n\n```sh\n$ npm install -g livereload\n$ livereload [path] [options]\n```\n\nTo watch files in the current directory for changes and use the default extensions, run this command:\n\n```sh\n$ livereload\n```\n\nTo watch files in another directory, specify its path:\n\n```sh\n$ livereload ~/website\n```\n\nThe commandline options are\n\n* `-p` or `--port` to specify the listening port\n* `-d` or `--debug` to show debug messages when the browser reloads.\n* `-e` or `--exts` to specify extentions that you want to observe. Example: ` -e 'jade,scss'`. Removes the default extensions.\n* `-ee` or `--extraExts` to include additional extentions that you want to observe. Example: ` -ee 'jade,scss'`.\n* `-x` or `--exclusions` to specify additional exclusion patterns. Example: `-x html, images/`.\n* `-u` or `--usepolling` to poll for file system changes. Set this to true to successfully watch files over a network.\n* `-w` or `--wait` to add a delay (in miliseconds) between when livereload detects a change to the filesystem and when it notifies the browser.\n* `-op` or `--originalpath` to set a URL you use for development, e.g 'http:/domain.com', then LiveReload will proxy this url to local path.\n\nFor example, to use a wait time and turn on debugging so you can see messages in your terminal, execute `livereload` like this:\n\n```sh\n$ livereload -w 1000 -d\n```\n\nTo turn on debugging and tell Livereload to only look at HTML files in the `public` directory, run it like this:\n\n```sh\n$ livereload public/ -e 'html'\n```\n\nThe file path can be at any place in the arguments. For example, you can put it at the end if you wish:\n\n```sh\n$ livereload -e 'html' public/\n```\n\nFinally, you can tell LiveReload to refresh the browser when specific filenames change. This is useful when there are files that don't have extensions, or when you want to exclude all HTML files except for `index.html` throughout the project. Use the `-f` or `--filesToReload` option:\n\n```sh\n$ livereload -f 'index.html' public/\n```\n\nAll changes to `index.html` in any subdirectory will cause LiveReload to send the reload message.\n\n## Option 2: From within your own project\n\nTo use the api within a project:\n\n```sh\n$ npm install livereload --save\n```\n\nThen, create a server and fire it up.\n\n```js\nvar livereload = require('livereload');\nvar server = livereload.createServer();\nserver.watch(__dirname + \"/public\");\n```\n\nYou can also use this with a Connect server. Here's an example of a simple server\nusing `connect` and a few other modules just to give you an idea:\n\n```js\nvar connect  = require('connect');\nvar compiler = require('connect-compiler');\nvar static = require('serve-static');\n\nvar server = connect();\n\nserver.use(\n  compiler({\n      enabled : [ 'coffee', 'uglify' ],\n      src     : 'src',\n      dest    : 'public'\n  })\n);\n\nserver.use(  static(__dirname + '/public'));\n\nserver.listen(3000);\n\nvar livereload = require('livereload');\nvar lrserver = livereload.createServer();\nlrserver.watch(__dirname + \"/public\");\n```\n\nYou can then start up the server which will listen on port `3000`.\n\n### Server API\n\nThe `createServer()` method accepts two arguments.\n\nThe first are some configuration options, passed as a JavaScript object:\n\n* `https` is an optional object of options to be passed to [https.createServer](http://nodejs.org/api/https.html#https_https_createserver_options_requestlistener) (if not provided, `http.createServer` is used instead)\n* `port` is the listening port. It defaults to `35729` which is what the LiveReload extensions use currently.\n* `exts` is an array of extensions you want to observe. This overrides the default extensions of `[`html`, `css`, `js`, `png`, `gif`, `jpg`, `php`, `php5`, `py`, `rb`,  `erb`, `coffee`]`.\n* `extraExts` is an array of extensions you want to observe. The default extensions are `[`html`, `css`, `js`, `png`, `gif`, `jpg`, `php`, `php5`, `py`, `rb`,  `erb`, `coffee`]`.\n* `applyCSSLive` tells LiveReload to reload CSS files in the background instead of refreshing the page. The default for this is `true`.\n* `applyImgLive` tells LiveReload to reload image files in the background instead of refreshing the page. The default for this is `true`. Namely for these extensions: jpg, jpeg, png, gif\n* `exclusions` lets you specify files to ignore. By default, this includes `.git/`, `.svn/`, and `.hg/`\n* `originalPath` Set URL you use for development, e.g 'http:/domain.com', then LiveReload will proxy this url to local path.\n* `overrideURL` lets you specify a different host for CSS files. This lets you edit local CSS files but view a live site. See <http://feedback.livereload.com/knowledgebase/articles/86220-preview-css-changes-against-a-live-site-then-uplo> for details.\n* `usePolling` Poll for file system changes. Set this to `true` to successfully watch files over a network.\n* `delay` add a delay (in miliseconds) between when livereload detects a change to the filesystem and when it notifies the browser. Useful if the browser is reloading/refreshing before a file has been compiled, for example, by browserify.\n* `noListen` Pass as `true` to indicate that the websocket server should not be started automatically. (useful if you want to start it yourself later)\n\nThe second argument is an optional `callback` that will be sent to the LiveReload server and called for the `listening` event. (ie: when the server is ready to start accepting connections)\n\n## Watching multiple paths:\n\nPassing an array of paths or glob patterns will allow you to watch multiple directories. All directories have the same configuration options.\n\n```js\nserver.watch([__dirname + \"/js\", __dirname + \"/css\"]);\n```\n\nCommand line:\n\n```sh\n$ livereload \"path1, path2, path3\"\n```\n\n## Using the `originalPath` option\n\nYou can map local CSS files to a remote URL. If your HTML file specifies live CSS files at `example.com` like this:\n\n```html\n<!-- html -->\n<head>\n  <link rel=\"stylesheet\" href=\"http://domain.com/css/style.css\">\n</head>\n```\n\nThen you can tell livereload to substitute a local CSS file instead:\n\n```js\n// server.js\nvar server = livereload.createServer({\n    originalPath: \"http://domain.com\"\n});\nserver.watch('/User/Workspace/test');\n```\n\nThen run the server:\n\n```sh\n$ node server.js\n```\n\nWhen `/User/Workspace/test/css/style.css` is modified, the stylesheet will be reloaded on the page.\n\n# Troubleshooting\n\n## The browser extension doesn't connect.\n\nIf you're using `file:///` urls, make sure the browser extension is configured to access local files.  Alternatively, embed the `livereload.js` script on your page as shown in this README. \n\n## When I change the HTML page I'm working on, the browser refreshes and tells me the file isn't found.\n\nYour editor is most likely using a swapfile, and when you save, there's a split second where the existing file is deleted from the file system before the swap file is saved in its place. This happens with Vim. You can disable swapfiles in your editor, or you can add a slight delay to Livereload using the `-w` option on the command line.\n\n\n\n# Developing livereload\n\nThis library is implemented in CoffeeScript 1.x. It may eventually be converted to JavaScript, but because there are many projects that depend on this library, the conversion isn't a priority.\n\nTo build the distributable versions, run `npm run build`.\n\nRun `npm test` to run the test suite.\n\n# Contributing\n\nContributions welcome, but remember that this library is meant to be small and serve its intended purpose only. Before submitting a pull request, open a new issue to discuss your feature or bug. Please check all open and closed issues.\n\nWhen submitting code, please keep commits small, and do not modify the README file. Commit both the Coffee and JS files.\n\n# Changelog\n\n### 0.9.3\n* CLI: Fix multiple path parsing bug.\n\n### 0.9.2\n* Server: Added `filesToReload` option to specify a list of filenames that should trigger the reload, rather than relying on extensions alone.\n* CLI: You can use the `-f` or `--filesToReload` option with the command line tool to specifiy filenames that should trigger a reload.\n* CLI: The file path is no longer fixed to a specific position in the arguments list\n* CLI: You no longer need to specify the file path when using additional arguments\n* CLI: You can use the `-op` or `--originalpath` option with the command line tool instead of writing your own server.\n* CLI: The help screen displays more accurate option descriptions.\n* Tests: Added more specific tests to ensure that refresh is called in various scenarios.\n* Other: Removed `Cakefile` as Cake is no longer needed. Use `npm run tests` and `npm run build` instead.\n* Dependencies: Updated `chokidar` dependency to 3.5.1\n* Dependencies: Updated `livereload-js` dependency to 3.3.1\n* Dependencies: Updated `ws` dependency to 7.4.3\n\n### 0.9.1\n* Fix issue with livereload.js not resolving properly on some projects (caseywebdev)\n* Update license to newer style to suppress \"no license\" messages.\n* Update test scripts to handle compilers properly, suppressing the deprecation notice\n* Deprecating the `cake` tasks for building the project.\n\n\n### 0.9.0\n* Serve Livereload client library from an NPM dependency instead of copying the code into the project - smhg\n* Update Chokidar to 3.3.0 which improves performance and reduces CPU load.\n\n### 0.8.2\n* Fix regression in 0.8.1 where broadcasting failed due to incompatibility between arrays and sets\n* Add debug message when broadcasting to each socket\n* Add debug message for the `input` message from clients\n\n### 0.8.1\n* Update `ws` dependency to v6.2.1 to close security vulnerability\n\n### 0.8.0\n* Update bundled Livereload.js file to v3.0.0\n* Update deps to close security vulnerabilities\n\n### 0.7.0\n* Updates bundled Livereload.js file to v2.3.0 to fix console error.\n* BREAKING CHANGE: The `exts` and `e` options now **replace** the default extensions.\n* Adds the `extraExts` and `ee` options to preserve the old behavior of adding extensions to watch.\n* You can now use `server.on 'error'` in your code to catch the \"port in use\" message gracefully. The CLI now handles this nicely as well.\n\n### 0.6.3\n* Updated to use Chokidar 1.7, which hopefully fixes some memory issues.\n* BUGFIX: Check to see if a `watcher` object is actually defined before attempting to close.\n* Added deprecation warning for `exts` option. In the next version, extensions you specify on the command line will OVERRIDE the default extensions. We'll add a new option for adding your exts to the defaults.\n* Modified CLI so it trims spaces from the extensions in the array, just in case you put spaces between the commas.\n\n### 0.6.2\n* CLI now properly splits extension list. Previous versions appended a blank entry to the list of extensions.\n* CLI now requires extensions to  be comma separated instead of space separated.\n* Added extra debugging info (protocol version, watched directory, extensions, and exclusions).\n* Cleaned up some inconsistencies in the code.\n\n### 0.6.1\n* Fix default exclusions regex\n\n### 0.6.0\n* Implements LiveReload protocol v7 so browser plugins work again.\n* Removes support for protocol v6\n* Introduces `noListen` option\n* Introduces optional callback which will be invoked when the LiveReload server is listening\n\n### 0.5.0\n* Updated `ws` library\n* Fix issues with exclusions\n* Allow watching multiple paths from CLI\n* Added `delay` option\n\n### 0.4.1\n* Remove some bad JS code\n  \n### 0.4.0\n* Rewritten using Chokidar library and `ws` library\n* Added `usePolling` option\n* Added support for specifying additional extensions from the CLI\n\nOlder version history not kept.\n\n# License\n\nCopyright (c) 2010-2021 Brian P. Hogan and Joshua Peek\n\nReleased under the MIT license. See `LICENSE` for details.\n",
    "licenseText": "Copyright (c) 2010 Joshua Peek\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/livereload/-/livereload-0.9.3.tgz#a714816375ed52471408bede8b49b2ee6a0c55b1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/livereload/-/livereload-0.9.3.tgz",
    "hash": "a714816375ed52471408bede8b49b2ee6a0c55b1",
    "integrity": "sha512-q7Z71n3i4X0R9xthAryBdNGVGAO2R5X+/xXpmKeuPMrteg+W2U8VusTKV3YiJbXZwKsOlFlHe+go6uSNjfxrZw==",
    "registry": "npm",
    "packageName": "livereload",
    "cacheIntegrity": "sha512-q7Z71n3i4X0R9xthAryBdNGVGAO2R5X+/xXpmKeuPMrteg+W2U8VusTKV3YiJbXZwKsOlFlHe+go6uSNjfxrZw== sha1-pxSBY3XtUkcUCL7ei0my7moMVbE="
  },
  "registry": "npm",
  "hash": "a714816375ed52471408bede8b49b2ee6a0c55b1"
}