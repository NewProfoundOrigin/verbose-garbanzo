{
  "manifest": {
    "name": "node-sloc",
    "version": "0.2.1",
    "description": "A small tool for counting SLOC.",
    "author": {
      "name": "Edvin Havic",
      "email": "edvinhavic@gmail.com"
    },
    "main": "lib/index.js",
    "type": "commonjs",
    "types": "lib",
    "files": [
      "lib",
      "bin",
      "esm-wrapper.mjs"
    ],
    "bin": {
      "node-sloc": "bin/node-sloc.js",
      "sloc": "bin/node-sloc.js"
    },
    "exports": {
      "import": "./esm-wrapper.mjs",
      "require": "./lib/index.js"
    },
    "scripts": {
      "start": "npm run build && node lib/cli.js",
      "build": "tsc -p ./tsconfig.json",
      "build:watch": "npm run build -- --watch",
      "test": "nyc --reporter=lcov ts-mocha -- ./test/**/*.spec.ts",
      "test:watch": "npm run test -- --watch",
      "prettier:base": "prettier --ignore-path .gitignore",
      "eslint:base": "eslint --ignore-path .gitignore",
      "lint:eslint": "npm run eslint:base -- --max-warnings 0 **/*.ts",
      "lint": "npm run lint:eslint",
      "format:prettier": "npm run prettier:base -- --write **/*.ts",
      "format:eslint": "npm run eslint:base -- --fix **/*.ts",
      "format": "npm run format:eslint && npm run format:prettier",
      "prepublishOnly": "npm run test && npm run build"
    },
    "husky": {
      "hooks": {
        "pre-commit": "npm run lint && npm test",
        "pre-push": "npm run lint && npm test"
      }
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/edvinh/node-sloc.git"
    },
    "keywords": [
      "sloc"
    ],
    "license": "MIT",
    "dependencies": {
      "chalk": "^4.1.0",
      "graceful-fs": "^4.2.6",
      "micromatch": "^4.0.2",
      "minimist": "^1.2.5"
    },
    "devDependencies": {
      "@types/chai": "^4.2.15",
      "@types/chai-as-promised": "^7.1.3",
      "@types/expect": "^24.3.0",
      "@types/graceful-fs": "^4.1.5",
      "@types/micromatch": "^4.0.1",
      "@types/minimist": "^1.2.1",
      "@types/mocha": "^8.2.1",
      "@types/node": "^14.14.32",
      "@typescript-eslint/eslint-plugin": "^4.16.1",
      "@typescript-eslint/parser": "^4.16.1",
      "chai": "^4.3.3",
      "chai-as-promised": "^7.1.1",
      "eslint": "^7.21.0",
      "eslint-config-prettier": "^8.1.0",
      "eslint-config-typescript": "^3.0.0",
      "eslint-plugin-prettier": "^3.3.1",
      "husky": "^4.3.8",
      "mocha": "^8.3.1",
      "np": "^7.4.0",
      "nyc": "^15.1.0",
      "prettier": "^2.2.1",
      "ts-mocha": "^8.0.0",
      "typescript": "^4.2.3"
    },
    "engines": {
      "node": ">=8.0.0"
    },
    "_registry": "npm",
    "_loc": "/code/v6/npm-node-sloc-0.2.1-7b4ac6bead860a90a52f3647bd2f32f62a9eb904-integrity/node_modules/node-sloc/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-sloc\n\nA small tool written in node for counting source lines of code.\n\n[![NPM](https://nodei.co/npm/node-sloc.png)](https://nodei.co/npm/node-sloc/)\n\n## Installation\n\nCan be used as either a command line application or as a module.\n\n### As a command line application\n\nInstall it globally and use it as a CLI -- both `node-sloc` and `sloc` will work in this case.\n\n```sh\n$ npm install -g node-sloc\n$ node-sloc .\n$ sloc . # Both node-sloc and sloc will run the CLI\n```\n\nYou can also run it with `npx`:\n\n```sh\n$ npx node-sloc .\n```\n\n### As a node module\n\n```sh\nnpm install --save node-sloc\n```\n\n# Usage\n\n## Command Line\n\n`node-sloc [path] [options]`\n\n### Options\n\n```\nusage:\n           node-sloc [path] [options]\noptions:\n           -h, --help                         Prints usage information\n\n           -l, --list-extensions              Lists all default file extensions\n\n           -e, --include-extensions <list>    Include non-default file extensions,\n                                              specified by a comma separated string of extensions\n\n           -i, --ignore-extensions <list>     Include list of file extensions to ignore,\n                                              specified by a comma separated string of extensions\n\n           -x, --ignore-paths <list>          Include a list of folders to exclude. Supports glob patterns\n\n           -d, --ignore-default               Ignore the default file extensions\n\n           -v, --verbose                      Output extra information during execution\n\n```\n\n## Examples\n\n```\n node-sloc ../app\n node-sloc ../app --include-extensions \"aaa, bbb, ccc\" --ignore-extensions \"xml, yaml\"\n node-sloc ../app --ignore-paths \"node_modules, **/*.test.js\"\n node-sloc file.js\n```\n\n```\n$ node-sloc . -x \"node_modules\"\nReading file(s)...\n\n    +---------------------------------------------------+\n    | SLOC                          | 2682              |\n    |-------------------------------|--------------------\n    | Lines of comments             | 206               |\n    |-------------------------------|--------------------\n    | Blank lines                   | 134               |\n    |-------------------------------|--------------------\n    | Files counted                 | 27                |\n    |-------------------------------|--------------------\n    | Total LOC                     | 2888              |\n    +---------------------------------------------------+\n```\n\n## Module\n\n### CommonJS\n\n```js\nconst sloc = require('node-sloc')\n\nconst options = {...}\n\nsloc(options).then((res) => {...})\n```\n\n### ES Modules\n\n```js\n// Named import is also supported, i.e.\n// import {sloc} from 'node-sloc'\nimport sloc from 'node-sloc'\n\nconst options = {...}\n\nsloc(options).then((res) => {...})\n```\n\n### Options\n\nThe options object the function takes as a parameter has the following properties:\n\n```\npath             Required. The path to walk or file to read.\nextensions       Additional file extensions to look for. Required if ignoreDefault is set to true.\nignorePaths      Optional. A list of directories to ignore. Supports glob patterns.\nignoreDefault    Optional. Whether to ignore the default file extensions or not. Defaults to false.\nlogger           Optional. Outputs extra information to if specified.\n```\n\n### Resolved object\n\nThe object returned when executing the function has the following structure:\n\n```js\n{\n  paths,      // An array of all filepaths counted\n  loc,        // Lines of code (SLOC + comments)\n  sloc,       // Source lines of code\n  blank,      // Number of blank lines\n  comments,   // Lines of comments\n  files,      // Number of files counted\n}\n```\n\n### Example\n\n```js\nconst sloc = require('node-sloc')\n\nconst options = {\n  path: '../app', // Required. The path to walk or file to read.\n  extensions: ['aaa', 'bbb', 'ccc'], // Additional file extensions to look for. Required if ignoreDefault is set to true.\n  ignorePaths: ['node_modules'], // A list of directories to ignore. Supports glob patterns.\n  ignoreDefault: false, // Whether to ignore the default file extensions or not\n  logger: console.log, // Optional. Outputs extra information to if specified.\n}\n\n// Using promises\nsloc(options).then((res) => {\n  console.log(res.paths, res.sloc, res.comments)\n})\n\n// Using node-style callbacks\nsloc(options, (err, res) => {\n  if (err) {\n    // do some error handling\n  }\n  console.log(res.paths, res.sloc, res.comments)\n})\n\n// Async-await (if supported)\nconst res = await sloc(options)\nconsole.log(res)\n```\n\n## Supported languages\n\n- ActionScript\n- Assembly\n- C#\n- C/C++\n- CoffeeScript\n- CSS\n- Elixir\n- Elm\n- Erlang\n- Go\n- Groovy\n- Handlebars\n- Haskell\n- HTML\n- Jade\n- Java\n- JavaScript\n- JSX\n- LESS\n- Lua\n- Mustache\n- Objective C\n- Perl\n- PHP\n- Pug\n- Python\n- Ruby\n- Rust\n- Sass\n- Scala\n- Shell script\n- Squirrel\n- Stylus\n- Swift\n- TypeScript\n- Visual Basic\n- XML\n- YAML\n- Any other language using C-style comments\n\n## License\n\nMIT\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-sloc/-/node-sloc-0.2.1.tgz#7b4ac6bead860a90a52f3647bd2f32f62a9eb904",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-sloc/-/node-sloc-0.2.1.tgz",
    "hash": "7b4ac6bead860a90a52f3647bd2f32f62a9eb904",
    "integrity": "sha512-88LR99IQm7fFyLB7syaa9z4tb8qTHyj6Lg9W9AYCOc8Wqa/Xmg7NuV+Sdtzg+dCUN6UgJ4iaAPdGj5/AF02l/w==",
    "registry": "npm",
    "packageName": "node-sloc",
    "cacheIntegrity": "sha512-88LR99IQm7fFyLB7syaa9z4tb8qTHyj6Lg9W9AYCOc8Wqa/Xmg7NuV+Sdtzg+dCUN6UgJ4iaAPdGj5/AF02l/w== sha1-e0rGvq2GCpClLzZHvS8y9iqeuQQ="
  },
  "registry": "npm",
  "hash": "7b4ac6bead860a90a52f3647bd2f32f62a9eb904"
}